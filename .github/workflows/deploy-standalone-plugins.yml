name: Deploy standalone plugins to WordPress.org

on:
  # TODO The pull_request will be removed once the workflow is tested.
  pull_request:
    branches:
      - trunk
      - 'release/**'
      - 'feature/**'
    paths:
      - '.github/workflows/deploy-standalone-plugins.yml'
    types:
      - opened
      - reopened
      - synchronize
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      slug:
        type: choice
        options:
        - audit-autoloaded-options
        - audit-enqueued-assets
        - dominant-color-images
        - fetchpriority
        - sqlite
        - webp-support
        - webp-uploads
        description: 'The slug of the plugin to deploy'

jobs:
  release:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Get plugin version
        id: get-version
        uses: actions/github-script@v6
        with:
          script: |
            if ( ${{ github.event_name != 'workflow_dispatch' }} ) {
              return "auto";
            }

            const fs = require( 'fs' );
            const path = require( 'path' );

            const pluginsFile = path.join( '.', 'plugins.json' );
            let pluginsFileContent = '';
            try {
              pluginsFileContent = fs.readFileSync( pluginsFile, 'utf-8' );
            } catch ( err ) {
              console.log( `Error reading the file "${ pluginsFile }": "${ err }"` );

              // Return with exit code 1 to trigger a failure in the deploy standalone workflow pipeline.
              process.exit( 1 );
            }
            
            if ( pluginsFileContent === '' ) {
              console.log( `Error reading the file "${ pluginsFile }"` );

              // Return with exit code 1 to trigger a failure in the deploy standalone workflow pipeline.
              process.exit( 1 );
            }

            const plugins = JSON.parse( pluginsFileContent );
            for ( const moduleDir in plugins ) {
              const pluginVersion = plugins[ moduleDir ]?.version;
              const pluginSlug = plugins[ moduleDir ]?.slug;

              if ( pluginVersion && pluginSlug && ( "${{ inputs.slug }}" == pluginSlug ) ) {
                return pluginVersion;
              }
            }

            console.log( `The "${{ inputs.slug }}" module slug is missing in the file "${ pluginsFile }".` );
            
            // Return with exit code 1 to trigger a failure in the deploy standalone workflow pipeline.
            process.exit( 1 );
      - name: Set matrix
        id: set-matrix
        run: |
          if [[ ${{ steps.get-version.outputs.result }} && ${{ steps.get-version.outputs.result }} == 'auto' ]]; then
            # Load the JSON file and parse from "{name: {slug, version}, ...}" to "include: [{ name, slug, version }, ...]"
            # for use in the matrix.
            echo "matrix="$(jq -c '{include:[keys[] as $k | {name:$k,slug:.[$k].slug,version:.[$k].version }]}' plugins.json) >> $GITHUB_OUTPUT
          else
            # Set the manual input values in JSON format for use in the matrix.
            echo "matrix={\"include\":[{\"slug\":\"${{ inputs.slug }}\",\"version\":\"${{ steps.get-version.outputs.result }}\"}]}" >> $GITHUB_OUTPUT            
          fi

  deploy:
    name: Deploy Plugin
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.release.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.js (.nvmrc)
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: npm
      - name: Install npm dependencies
        run: npm ci
      - name: Building standalone plugins
        run: npm run build-plugins
      - name: Deploy Standalone Plugin - ${{ matrix.slug }}
        uses: 10up/action-wordpress-plugin-deploy@stable
        env:
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SLUG: ${{ matrix.slug }}
          VERSION: ${{ matrix.version }}
          BUILD_DIR: ./build/${{ matrix.slug }}
          ASSETS_DIR: ./build/${{ matrix.slug }}/.wordpress-org
